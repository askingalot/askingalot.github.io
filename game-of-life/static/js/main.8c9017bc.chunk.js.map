{"version":3,"sources":["Cell.js","BoolArray.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","isAlive","row","col","toggleAlive","classes","className","onClick","BoolArray","lengthOrSource","fill","this","_length","_byteArray","Uint8Array","mapFn","result","Array","i","get","fillFn","set","index","byteIndex","Math","floor","bitIndex","value","byte","BoolArrayProxy","Proxy","boolAr","prop","range","size","keys","randomBool","random","createBoard","blank","map","copyBoard","board","livingNeighborCount","aliveCount","r","length","c","nextBoard","oldBoard","newBoard","count","App","useState","setBoard","isRunning","setIsRunning","intervalId","setIntervalId","boardSize","oldValue","useEffect","setInterval","clearInterval","gridColStyle","gridTemplateColumns","repeat","id","onChange","evt","parseInt","target","key","style","ri","ci","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c9017bc.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.memo(function Cell({ isAlive, row, col, toggleAlive }) {\n  const classes = 'cell ' + (isAlive ? 'is-alive' : '');\n  return (\n    <div className={classes} onClick={() => toggleAlive(row, col)}>\n    </div>\n  );\n});","class BoolArray {\n  constructor(lengthOrSource, fill) {\n    if (typeof lengthOrSource === 'number') {\n      this._length = lengthOrSource;\n      this._byteArray = new Uint8Array((this._length / 8) + 1);\n      if (typeof fill === 'function') {\n        this.fill(fill);\n      }\n    } else {\n      this._length = lengthOrSource._length;\n      this._byteArray = new Uint8Array(lengthOrSource._byteArray);\n    }\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  map(mapFn) {\n    const result = new Array(this._length);\n    for (let i = 0; i < this._length; i++) {\n      result[i] = mapFn(this.get(i), i);\n    }\n    return result;\n  }\n\n  fill(fillFn) {\n    for (let i = 0; i < this._length; i++) {\n      this.set(i, fillFn(i))\n    }\n    return this;\n  }\n\n  get(index) {\n    const byteIndex = Math.floor(index / 8);\n    const bitIndex = Math.floor(index % 8);\n\n    const byte = this._byteArray[byteIndex];\n    return !!(1 & (byte >> bitIndex));\n  }\n\n  set(index, value) {\n    const byteIndex = Math.floor(index / 8);\n    const bitIndex = Math.floor(index % 8);\n\n    const byte = this._byteArray[byteIndex];\n    this._byteArray[byteIndex] = value\n      ? byte ^ (1 << bitIndex)\n      : byte & (255 - (1 << bitIndex));\n  }\n}\n\nfunction BoolArrayProxy(lengthOrSource, fill) {\n  return new Proxy(new BoolArray(lengthOrSource, fill), {\n    get(boolAr, prop) {\n      return prop in boolAr ? boolAr[prop] : boolAr.get(prop);\n    },\n    set(boolAr, prop, value) {\n      if (prop in boolAr) {\n        boolAr[prop] = value;\n      } else {\n        boolAr.set(prop, value);\n      }\n      return true;\n    }\n  });\n}\n\nexport default BoolArrayProxy;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Cell from './Cell';\nimport BoolArray from './BoolArray';\n\nfunction range(size) {\n  return [...Array(size).keys()];\n}\n\nfunction randomBool() {\n  return Math.random() >= 0.5;\n}\n\nfunction createBoard(size, blank = false) {\n  return blank\n    ? range(size).map(() => new BoolArray(size))\n    : range(size).map(() => new BoolArray(size, randomBool));\n}\n\nfunction copyBoard(board) {\n  return board.map(row => new BoolArray(row));\n}\n\nfunction livingNeighborCount(row, col, board) {\n  let aliveCount = 0\n  for (let r = row - 1; r <= row + 1; r++) {\n    if (r < 0 || r >= board.length) continue;\n\n    for (let c = col - 1; c <= col + 1; c++) {\n      if (c < 0 || c >= board.length || (r === row && c === col)) continue;\n\n      if (board[r][c]) {\n        aliveCount++\n      }\n    }\n  }\n\n  return aliveCount;\n}\n\nfunction nextBoard(oldBoard) {\n  const newBoard = copyBoard(oldBoard);\n\n  for (let row = 0; row < newBoard.length; row++) {\n    for (let col = 0; col < newBoard[0].length; col++) {\n      const isAlive = oldBoard[row][col];\n      const count = livingNeighborCount(row, col, oldBoard);\n      if (isAlive && (count < 2 || count > 3)) {\n        newBoard[row][col] = false;\n      } else if (!isAlive && count === 3) {\n        newBoard[row][col] = true;\n      }\n    }\n  }\n\n  return newBoard;\n}\n\nfunction App() {\n  const initialBoardSize = 50;\n\n  const [board, setBoard] = useState(() => createBoard(initialBoardSize));\n  const [isRunning, setIsRunning] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n  const boardSize = () => board.length;\n\n  const toggleAlive = (row, col) => {\n    const newBoard = copyBoard(board);\n    const oldValue = newBoard[row][col];\n    newBoard[row][col] = !oldValue;\n    setBoard(newBoard);\n  };\n\n  useEffect(() => {\n    if (isRunning) {\n      const intervalId = setInterval(() => {\n        setBoard(nextBoard)\n      }, 350);\n      setIntervalId(intervalId);\n    } else {\n      intervalId && clearInterval(intervalId);\n      setIntervalId(null);\n    }\n\n    return () => intervalId && clearInterval(intervalId);\n  }, [isRunning]);\n\n  const start = () => setIsRunning(true);\n  const stop = () => setIsRunning(false);\n  const clear = () => setBoard(createBoard(boardSize(), true));\n  const random = () => setBoard(createBoard(boardSize()));\n  const resetBoard = evt => setBoard(createBoard(parseInt(evt.target.value)));\n\n  const gridColStyle = { gridTemplateColumns: 'auto '.repeat(boardSize()) };\n  const sizeOptions = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\n  return (\n    <>\n      <header id=\"header\">\n        {isRunning\n          ? <button className=\"primary\" onClick={stop}>Stop</button>\n          : <>\n            <button className=\"primary\" onClick={start}>Start</button>\n            <button onClick={random}>Random</button>\n            <button onClick={clear}>Clear</button>\n            <select onChange={resetBoard} value={boardSize()}>\n              {sizeOptions.map(size => <option key={size}>{size}</option>)}\n            </select>\n          </>\n        }\n      </header>\n      <div id=\"board\" style={gridColStyle}>\n        {\n          board.map((row, ri) =>\n            row.map((isAlive, ci) =>\n              <Cell key={ri * 1000 + ci}\n                isAlive={isAlive}\n                row={ri}\n                col={ci}\n                toggleAlive={toggleAlive}\n              />\n            )\n          )\n        }\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}